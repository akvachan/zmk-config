/*  ──────────────────────────────────────────────────────────────
    Cyboard Imprint  (ZMK device-tree overlay)
    ────────────────────────────────────────────────────────────── */
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/rgb.h>
#include <dt-bindings/zmk/ext_power.h>

/ {
    /* the Imprint uses the dactyl-manuform matrix definition that
       expects 6 columns per main row + the thumb-cluster columns   */
    chosen { zmk,matrix-transform = &dactyl_manuform_number_row; };

    keymap {
        compatible = "zmk,keymap";

        /* ────────────────  LAYER 0 – BASE  ──────────────── */
        default_layer {
            bindings = <
        /* top row */      &kp TAB   &kp Q     &kp W     &kp E     &kp R     &kp T                                   &kp Y      &kp U     &kp I        &kp O        &kp P       &kp BSPC
        /* home row */     &kp LCTRL &kp A     &kp S     &kp D     &kp F     &kp G                                   &kp H      &kp J     &kp K        &kp L        &kp SEMI    &kp RET
        /* bottom row */   &kp LSHFT &kp Z     &kp X     &kp C     &kp V     &kp B                                   &kp N      &kp M     &kp COMMA    &kp DOT      &kp FSLH    &kp RSHFT
        /* bracket row */  &kp ESC   &kp LCBR  &kp LBKT  &kp LPAR  &mo 1     &kp LGUI                                                    &kp RPAR   &kp RCBR   &kp RBKT    &kp SQT
        /* thumbs 1 */                                                                                 &kp LALT  &kp PSCRN    &trans            &kp RGUI   &kp RALT  &kp SPACE
        /* thumbs 2 */                                                                                 &kp MINUS &kp EQUAL    &trans            &kp C_VOL_DN &kp C_VOL_UP &trans
            >;
        };

        /* ────────────────  LAYER 1 – NUM / NAV  ────────────────
           (tap MO(1) on either thumb to reach this layer)        */
        layer_1 {
            bindings = <
        /* shifted symbols */ &trans       &kp LS(N1)  &kp LS(N6)  &kp LS(N2)  &kp LS(N3)  &kp LS(EQUAL)                           &kp LS(N5)  &kp LS(N7)  &kp LS(N8)  &kp LS(N4)  &kp EQUAL   &trans
        /* plain digits   */  &kp N1       &kp N2       &kp N3       &kp N4       &kp N5       &trans                               &kp N6       &kp N7       &kp N8       &kp N9       &kp N0      &trans
        /* nav / sym row  */  &trans       &trans       &kp PIPE     &kp PIPE     &kp MINUS    &kp LS(MINUS)                        &kp LS(PIPE) &kp LEFT     &kp DOWN     &kp UP       &kp RIGHT   &trans
                              &trans       &trans       &trans       &trans                                                                               &trans        &trans       &trans       &trans
        /* thumbs (unchanged here) */                                                                      &trans      &trans       &trans           &kp C_VOL_DN &kp C_VOL_UP &kp C_PP
            >;
        };

        /* ────────────────  LAYER 2 – RGB (placeholder) ───────── */
        layer_2 {
            bindings = <
        /* all transparent except RGB controls on the right-half */
            &trans &trans &trans &trans &trans &trans                                  &trans &rgb_ug RGB_TOG &trans &trans &trans &trans
            &trans &trans &trans &trans &trans &trans                                  &trans &rgb_ug RGB_HUI &rgb_ug RGB_SAI &rgb_ug RGB_BRI &trans &trans
            &trans &trans &trans &trans &trans &trans                                  &trans &rgb_ug RGB_HUD &rgb_ug RGB_SAD &rgb_ug RGB_BRD &trans &trans
            &trans &trans &trans &trans &trans &trans                                  &trans &trans          &trans          &trans          &trans &trans
            &trans &trans &trans &trans                                                                                           &trans &trans &trans &trans
                                            &trans &trans &trans    &trans &trans &trans
                                            &trans &trans &trans    &trans &trans &trans
            >;
        };
    };
};
